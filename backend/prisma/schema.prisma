generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hotel {
  id    Int    @id @default(autoincrement())
  name  String
  rooms Int
}

model CalendarDate {
  date           DateTime @id
  season         Season
  zoneAIsHoliday Boolean
}

model Scenario {
  id           Int                 @id @default(autoincrement())
  name         String
  horizonYears Int                 @default(5)
  isActive     Boolean             @default(false)
  charges      ChargeAssumption[]
  revenues     RevenueAssumption[]
}

model RevenueAssumption {
  id              Int        @id @default(autoincrement())
  scenarioId      Int
  department      Department
  season          Season
  adr             Decimal?   @db.Decimal(10, 2)
  occupancy       Decimal?   @db.Decimal(5, 2)
  spendPerOccRoom Decimal?   @db.Decimal(10, 2)
  scenario        Scenario   @relation(fields: [scenarioId], references: [id])
}

model ChargeAssumption {
  id         Int            @id @default(autoincrement())
  scenarioId Int
  category   ChargeCategory
  department Department
  basis      Basis
  amount     Decimal        @db.Decimal(12, 2)
  season     Season
  capexYears Int?
  scenario   Scenario       @relation(fields: [scenarioId], references: [id])
}

model SalaryGrid {
  id           Int        @id @default(autoincrement())
  level        Int
  echelon      Int
  hourlyRate   Decimal    @db.Decimal(8, 2)
  daysOff      Int
  vacationDays Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  employees    Employee[]
}

model Service {
  id                  Int                   @id @default(autoincrement())
  name                String
  type                ServiceType
  color               String                @default("#eca08e")
  createdAt           DateTime              @default(now())
  isActive            Boolean               @default(true)
  updatedAt           DateTime              @updatedAt
  employees           Employee[]
  polyvalentEmployees EmployeePolyvalence[]
  openings            OpeningWindow[]
  schedules           ServiceSchedule[]
  staffingRules       StaffingRule[]
}

model ServiceSchedule {
  id             Int      @id @default(autoincrement())
  serviceId      Int
  season         Season
  dayOfWeek      Int
  openTime       String
  closeTime      String
  isHoliday      Boolean  @default(false)
  isException    Boolean  @default(false)
  staffStartTime String?
  staffEndTime   String?
  isStaffClosed  Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  service        Service  @relation(fields: [serviceId], references: [id])
}

model Employee {
  id                     Int                   @id @default(autoincrement())
  firstName              String
  lastName               String
  fullName               String?               // Nouveau champ pour l'affichage
  mainServiceId          Int
  contractType           ContractType
  weeklyHours            WeeklyHours
  salaryGridId           Int
  isActive               Boolean               @default(true)
  flexibilityType        FlexibilityType       @default(STANDARD)
  minWeeklyHours         Int?                 @default(0)
  maxWeeklyHours         Int?                 @default(35)
  preferredShifts        String[]             @default([])
  
  // Nouveaux champs pour la masse salariale
  compensationMode       CompensationMode      @default(MONTHLY)
  grossMonthlyBase       Decimal?             @db.Decimal(10, 2)
  grossHourlyRate        Decimal?             @db.Decimal(8, 2)
  employerChargeRateFactor Decimal?           @db.Decimal(5, 2)
  annualLeaveRate        Decimal?             @db.Decimal(5, 2)
  thirteenthMonthRate    Decimal?             @db.Decimal(5, 2)
  
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  mainService            Service              @relation(fields: [mainServiceId], references: [id])
  salaryGrid             SalaryGrid           @relation(fields: [salaryGridId], references: [id])
  polyvalentServices     EmployeePolyvalence[]
  schedules              EmployeeSchedule[]
  paidLeaves             PaidLeave[]          @relation("EmployeePaidLeaves")
}

model EmployeePolyvalence {
  id         Int      @id @default(autoincrement())
  employeeId Int
  serviceId  Int
  createdAt  DateTime @default(now())
  employee   Employee @relation(fields: [employeeId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])
}

model EmployeeSchedule {
  id         Int      @id @default(autoincrement())
  employeeId Int
  date       DateTime
  startTime  String
  endTime    String
  breakTime  Int      @default(30)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model PaidLeave {
  id         Int      @id @default(autoincrement())
  employeeId Int
  startDate  DateTime
  endDate    DateTime
  days       Int
  year       Int
  status     LeaveStatus @default(APPROVED)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation("EmployeePaidLeaves", fields: [employeeId], references: [id])
}

model OpeningWindow {
  id        Int     @id @default(autoincrement())
  serviceId Int
  season    Season
  dow       Int
  openTime  String
  closeTime String
  service   Service @relation(fields: [serviceId], references: [id])
}

model StaffingRule {
  id            Int     @id @default(autoincrement())
  serviceId     Int
  coveragePosts Int
  service       Service @relation(fields: [serviceId], references: [id])
}

model PayrollAssumption {
  id               Int     @id @default(autoincrement())
  role             String
  baseMonthlyGross Decimal @db.Decimal(12, 2)
  employerRate     Decimal @db.Decimal(5, 2)
  weeklyNormHours  Int
}

model ScenarioResultMonthly {
  id             Int      @id @default(autoincrement())
  scenarioId     Int
  year           Int
  month          Int
  roomsAvailable Int?
  roomsSold      Int?
  adr            Decimal? @db.Decimal(10, 2)
  revpar         Decimal? @db.Decimal(10, 2)
  trevpar        Decimal? @db.Decimal(10, 2)
  caHebergement  Decimal? @db.Decimal(12, 2)
  caFnb          Decimal? @db.Decimal(12, 2)
  caSpa          Decimal? @db.Decimal(12, 2)
  caMice         Decimal? @db.Decimal(12, 2)
  caAutres       Decimal? @db.Decimal(12, 2)
  caTotal        Decimal? @db.Decimal(12, 2)
  payrollTotal   Decimal? @db.Decimal(12, 2)
  opexTotal      Decimal? @db.Decimal(12, 2)
  capexAmort     Decimal? @db.Decimal(12, 2)
  gop            Decimal? @db.Decimal(12, 2)
  ebitda         Decimal? @db.Decimal(12, 2)
  resultatNet    Decimal? @db.Decimal(12, 2)
}

enum Season {
  HAUTE
  BASSE
}

enum Department {
  HEBERGEMENT
  FNB
  SPA
  MICE
  AUTRES
}

enum ChargeCategory {
  FIXE
  VARIABLE
  SAISONNIERE
  CAPEX
}

enum Basis {
  PAR_CHAMBRE
  PAR_NUIT_OCCUPEE
  POURCENT_CA
  MONTANT
}

enum ContractType {
  CDI
  CDD
  SAISONNIER
  MI_TEMPS
  EXTRA
}

enum WeeklyHours {
  H35
  H39
  H35_MODULABLE
  H39_MODULABLE
}

enum FlexibilityType {
  STANDARD
  PART_TIME
}

enum ServiceType {
  RESTAURATION
  AUTRE
}

enum CompensationMode {
  HOURLY
  MONTHLY
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

